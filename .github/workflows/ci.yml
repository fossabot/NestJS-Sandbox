# Main workflow for this application to provide continuous integration steps like 
# - check for dependency updates (ncu)
# - coverage
# - build
# - release and changelog automation
name: CI Pipeline

# settings when the pipeline is triggered
on:
  push:
    branches:
      - main
      
  # allow manual runs
  workflow_dispatch:

# permissions for this workflow
permissions:
  contents: write
  pull-requests: write

# The jobs, this workflow runs
jobs:
  check_dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Check for package updates
        run: npx ncu -d -u

      - name: Check if package.json has changed
        id: check_package_json
        run: git diff --quiet HEAD -- package.json || echo "::set-output name=changed::true"

      - name: Persist changes in package.json
        if: steps.check_package_json.outputs.changed == 'true'
        run: |
          git add package.json package-lock.json
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "chore: Update dependencies"
          git push

  coverage:
    name: Coverage Report (CodeCov)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
        
      - name: Install Dependencies
        run: npm ci

      - name: Create Coverage Report
        run: npm run test:cov

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
  
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [ check_dependencies ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for dependency updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_sha=$(git rev-parse HEAD)
          latest_sha=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.head_ref }} \
          | jq -r '.sha')
          if [[ "$current_sha" != "$latest_sha" ]]; then
          echo "::set-output name=updated::true"
          fi

      - name: Pull latest changes
        if: steps.check_updates.outputs.updated == 'true'
        run: git pull

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build the application
        run: npm run build

  release-please:
    needs:
      - build

    runs-on: ubuntu-latest

    steps:
      - name: create release and changelog
        id: create_release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node

      - name: current version
        id: current_version
        if: steps.create_release.outputs.release_created == 'true'
        run: | 
          VERSION=$(echo ${{ steps.create_release.outputs.major }}.${{ steps.create_release.outputs.minor }}.${{ steps.create_release.outputs.patch }})
          echo "::set-output name=version::$VERSION"

      - name: Merge Release PR
        if: steps.create_release.outputs.release_created == 'true'
        uses: pascalgn/automerge-action@v0.15.6
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_LABELS: "autorelease: pending"
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "chore: release ${{ steps.current_version.outputs.version }}"
          MERGE_DELETE_BRANCH: "true"
          MERGE_RETRIES: 3
          MERGE_RETRY_SLEEP: 100
          UPDATE_LABELS: "autorelease: tagged"

  build-and-push-docker:
    needs:
      - build
      - release-please

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and name
        id: package_info
        run: |
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          PACKAGE_NAME=$(jq -r '.name' package.json)
          echo "::set-output name=PACKAGE_VERSION::$PACKAGE_VERSION"
          echo "::set-output name=PACKAGE_NAME::$PACKAGE_NAME"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ steps.package_info.outputs.PACKAGE_NAME }}:${{ steps.package_info.outputs.PACKAGE_VERSION }}
